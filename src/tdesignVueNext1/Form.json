{
  "name": "TForm",
  "props": {
    "colon": {
      "description": "是否在表单标签字段右侧显示冒号",
      "description_zh": "是否在表单标签字段右侧显示冒号",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "data": {
      "description": "表单数据。TS 类型：FormData",
      "description_zh": "表单数据。TS 类型：FormData",
      "default": "{}",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "disabled": {
      "description": "是否禁用整个表单",
      "description_zh": "是否禁用整个表单",
      "default": "undefined",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "errorMessage": {
      "description": "表单错误信息配置，示例：{ idcard: '请输入正确的身份证号码', max: '字符长度不能超过 ${max}' }。TS 类型：FormErrorMessage",
      "description_zh": "表单错误信息配置，示例：{ idcard: '请输入正确的身份证号码', max: '字符长度不能超过 ${max}' }。TS 类型：FormErrorMessage",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "formControlledComponents": {
      "description": "允许表单统一控制禁用状态的自定义组件名称列表。默认会有组件库的全部输入类组件：TInput、TInputNumber、TCascader、TSelect、TOption、TSwitch、TCheckbox、TCheckboxGroup、TRadio、TRadioGroup、TTreeSelect、TDatePicker、TTimePicker、TUpload、TTransfer、TSlider。对于自定义组件，组件内部需要包含可以控制表单禁用状态的变量 formDisabled。示例：['CustomUpload', 'CustomInput']。TS 类型：Array<string>",
      "description_zh": "允许表单统一控制禁用状态的自定义组件名称列表。默认会有组件库的全部输入类组件：TInput、TInputNumber、TCascader、TSelect、TOption、TSwitch、TCheckbox、TCheckboxGroup、TRadio、TRadioGroup、TTreeSelect、TDatePicker、TTimePicker、TUpload、TTransfer、TSlider。对于自定义组件，组件内部需要包含可以控制表单禁用状态的变量 formDisabled。示例：['CustomUpload', 'CustomInput']。TS 类型：Array<string>",
      "default": "-",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "id": {
      "description": "表单原生的id属性，支持用于配合非表单内的按钮通过form属性来触发表单事件",
      "description_zh": "表单原生的id属性，支持用于配合非表单内的按钮通过form属性来触发表单事件",
      "default": "undefined",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "labelAlign": {
      "description": "表单字段标签对齐方式：左对齐、右对齐、顶部对齐。可选项：left/right/top",
      "description_zh": "表单字段标签对齐方式：左对齐、右对齐、顶部对齐。可选项：left/right/top",
      "default": "right",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "labelWidth": {
      "description": "可以整体设置label标签宽度，默认为100px",
      "description_zh": "可以整体设置label标签宽度，默认为100px",
      "default": "'100px'",
      "value": "",
      "type": "String / Number",
      "required": false,
      "version": ""
    },
    "layout": {
      "description": "表单布局，有两种方式：纵向布局 和 行内布局。可选项：vertical/inline",
      "description_zh": "表单布局，有两种方式：纵向布局 和 行内布局。可选项：vertical/inline",
      "default": "vertical",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "preventSubmitDefault": {
      "description": "是否阻止表单提交默认事件（表单提交默认事件会刷新页面），设置为 true 可以避免刷新",
      "description_zh": "是否阻止表单提交默认事件（表单提交默认事件会刷新页面），设置为 true 可以避免刷新",
      "default": "true",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "requiredMark": {
      "description": "是否显示必填符号（*），默认显示",
      "description_zh": "是否显示必填符号（*），默认显示",
      "default": "true",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "resetType": {
      "description": "重置表单的方式，值为 empty 表示重置表单为空，值为 initial 表示重置表单数据为初始值。可选项：empty/initial",
      "description_zh": "重置表单的方式，值为 empty 表示重置表单为空，值为 initial 表示重置表单数据为初始值。可选项：empty/initial",
      "default": "empty",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "rules": {
      "description": "表单字段校验规则。TS 类型：FormRules<FormData> type FormRules<T extends Data = any> = { [field in keyof T]?: Array<FormRule> }。详细类型定义",
      "description_zh": "表单字段校验规则。TS 类型：FormRules<FormData> type FormRules<T extends Data = any> = { [field in keyof T]?: Array<FormRule> }。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "scrollToFirstError": {
      "description": "表单校验不通过时，是否自动滚动到第一个校验不通过的字段，平滑滚动或是瞬间直达。值为空则表示不滚动。可选项：''/smooth/auto",
      "description_zh": "表单校验不通过时，是否自动滚动到第一个校验不通过的字段，平滑滚动或是瞬间直达。值为空则表示不滚动。可选项：''/smooth/auto",
      "default": "-",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "showErrorMessage": {
      "description": "校验不通过时，是否显示错误提示信息，统一控制全部表单项。如果希望控制单个表单项，请给 FormItem 设置该属性",
      "description_zh": "校验不通过时，是否显示错误提示信息，统一控制全部表单项。如果希望控制单个表单项，请给 FormItem 设置该属性",
      "default": "true",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "statusIcon": {
      "description": "校验状态图标，值为 true 显示默认图标，默认图标有 成功、失败、警告 等，不同的状态图标不同。statusIcon 值为 false，不显示图标。statusIcon 值类型为渲染函数，则可以自定义右侧状态图标。TS 类型：boolean | TNode<TdFormItemProps>。通用类型定义",
      "description_zh": "校验状态图标，值为 true 显示默认图标，默认图标有 成功、失败、警告 等，不同的状态图标不同。statusIcon 值为 false，不显示图标。statusIcon 值类型为渲染函数，则可以自定义右侧状态图标。TS 类型：boolean | TNode<TdFormItemProps>。通用类型定义",
      "default": "undefined",
      "value": "",
      "type": "Boolean / Slot / Function",
      "required": false,
      "version": ""
    },
    "submitWithWarningMessage": {
      "description": "【讨论中】当校验结果只有告警信息时，是否触发 submit 提交事件",
      "description_zh": "【讨论中】当校验结果只有告警信息时，是否触发 submit 提交事件",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "onReset": {
      "description": "TS 类型：(context: { e?: FormResetEvent }) => void表单重置时触发",
      "description_zh": "TS 类型：(context: { e?: FormResetEvent }) => void表单重置时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onSubmit": {
      "description": "TS 类型：(context: SubmitContext<FormData>) => void表单提交时触发。其中 context.validateResult 表示校验结果，context.firstError 表示校验不通过的第一个规则提醒。context.validateResult 值为 true 表示校验通过；如果校验不通过，context.validateResult 值为校验结果列表。【注意】⚠️ 默认情况，输入框按下 Enter 键会自动触发提交事件，如果希望禁用这个默认行为，可以给输入框添加 enter 事件，并在事件中设置 e.preventDefault()。详细类型定义。interface SubmitContext<T extends Data = Data> { e?: FormSubmitEvent; validateResult: FormValidateResult<T>; firstError?: string; fields?: any }type FormValidateResult<T> = boolean | ValidateResultObj<T>type ValidateResultObj<T> = { [key in keyof T]: boolean | ValidateResultList }type ValidateResultList = Array<AllValidateResult>type AllValidateResult = CustomValidateObj | ValidateResultTypeinterface ValidateResultType extends FormRule { result: boolean }type ValidateResult<T> = { [key in keyof T]: boolean | ErrorList }type ErrorList = Array<FormRule>",
      "description_zh": "TS 类型：(context: SubmitContext<FormData>) => void表单提交时触发。其中 context.validateResult 表示校验结果，context.firstError 表示校验不通过的第一个规则提醒。context.validateResult 值为 true 表示校验通过；如果校验不通过，context.validateResult 值为校验结果列表。【注意】⚠️ 默认情况，输入框按下 Enter 键会自动触发提交事件，如果希望禁用这个默认行为，可以给输入框添加 enter 事件，并在事件中设置 e.preventDefault()。详细类型定义。interface SubmitContext<T extends Data = Data> { e?: FormSubmitEvent; validateResult: FormValidateResult<T>; firstError?: string; fields?: any }type FormValidateResult<T> = boolean | ValidateResultObj<T>type ValidateResultObj<T> = { [key in keyof T]: boolean | ValidateResultList }type ValidateResultList = Array<AllValidateResult>type AllValidateResult = CustomValidateObj | ValidateResultTypeinterface ValidateResultType extends FormRule { result: boolean }type ValidateResult<T> = { [key in keyof T]: boolean | ErrorList }type ErrorList = Array<FormRule>",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onValidate": {
      "description": "TS 类型：(result: ValidateResultContext<FormData>) => void校验结束后触发，result 值为 true 表示校验通过；如果校验不通过，result 值为校验结果列表。详细类型定义。type ValidateResultContext<T extends Data> = Omit<SubmitContext<T>, 'e'>",
      "description_zh": "TS 类型：(result: ValidateResultContext<FormData>) => void校验结束后触发，result 值为 true 表示校验通过；如果校验不通过，result 值为校验结果列表。详细类型定义。type ValidateResultContext<T extends Data> = Omit<SubmitContext<T>, 'e'>",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    }
  },
  "link": "https://tdesign.tencent.com/vue/components/form",
  "link_zh": "https://tdesign.tencent.com/vue/components/form",
  "typeDetail": {},
  "events": [
    {
      "name": "reset",
      "description": "表单重置时触发",
      "params": "(context: { e?: FormResetEvent })",
      "description_zh": "表单重置时触发"
    },
    {
      "name": "submit",
      "description": "表单提交时触发。其中 context.validateResult 表示校验结果，context.firstError 表示校验不通过的第一个规则提醒。context.validateResult 值为 true 表示校验通过；如果校验不通过，context.validateResult 值为校验结果列表。【注意】⚠️ 默认情况，输入框按下 Enter 键会自动触发提交事件，如果希望禁用这个默认行为，可以给输入框添加 enter 事件，并在事件中设置 e.preventDefault()。详细类型定义。interface SubmitContext<T extends Data = Data> { e?: FormSubmitEvent; validateResult: FormValidateResult<T>; firstError?: string; fields?: any }type FormValidateResult<T> = boolean | ValidateResultObj<T>type ValidateResultObj<T> = { [key in keyof T]: boolean | ValidateResultList }type ValidateResultList = Array<AllValidateResult>type AllValidateResult = CustomValidateObj | ValidateResultTypeinterface ValidateResultType extends FormRule { result: boolean }type ValidateResult<T> = { [key in keyof T]: boolean | ErrorList }type ErrorList = Array<FormRule>",
      "params": "(context: SubmitContext<FormData>)",
      "description_zh": "表单提交时触发。其中 context.validateResult 表示校验结果，context.firstError 表示校验不通过的第一个规则提醒。context.validateResult 值为 true 表示校验通过；如果校验不通过，context.validateResult 值为校验结果列表。【注意】⚠️ 默认情况，输入框按下 Enter 键会自动触发提交事件，如果希望禁用这个默认行为，可以给输入框添加 enter 事件，并在事件中设置 e.preventDefault()。详细类型定义。interface SubmitContext<T extends Data = Data> { e?: FormSubmitEvent; validateResult: FormValidateResult<T>; firstError?: string; fields?: any }type FormValidateResult<T> = boolean | ValidateResultObj<T>type ValidateResultObj<T> = { [key in keyof T]: boolean | ValidateResultList }type ValidateResultList = Array<AllValidateResult>type AllValidateResult = CustomValidateObj | ValidateResultTypeinterface ValidateResultType extends FormRule { result: boolean }type ValidateResult<T> = { [key in keyof T]: boolean | ErrorList }type ErrorList = Array<FormRule>"
    },
    {
      "name": "validate",
      "description": "校验结束后触发，result 值为 true 表示校验通过；如果校验不通过，result 值为校验结果列表。详细类型定义。type ValidateResultContext<T extends Data> = Omit<SubmitContext<T>, 'e'>",
      "params": "(result: ValidateResultContext<FormData>)",
      "description_zh": "校验结束后触发，result 值为 true 表示校验通过；如果校验不通过，result 值为校验结果列表。详细类型定义。type ValidateResultContext<T extends Data> = Omit<SubmitContext<T>, 'e'>"
    }
  ],
  "methods": [],
  "slots": [],
  "suggestions": [
    "t-form-item"
  ],
  "filename": "Form"
}
