{
  "name": "TBaseTable",
  "props": {
    "activeRowKeys": {
      "description": "高亮行，支持鼠标键盘操作(Shift)连续高亮行，可用于处理行选中等批量操作，模拟操作系统区域选择行为。支持语法糖 .sync。TS 类型：Array<string | number>",
      "description_zh": "高亮行，支持鼠标键盘操作(Shift)连续高亮行，可用于处理行选中等批量操作，模拟操作系统区域选择行为。支持语法糖 .sync。TS 类型：Array<string | number>",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "defaultActiveRowKeys": {
      "description": "高亮行，支持鼠标键盘操作(Shift)连续高亮行，可用于处理行选中等批量操作，模拟操作系统区域选择行为。非受控属性。TS 类型：Array<string | number>",
      "description_zh": "高亮行，支持鼠标键盘操作(Shift)连续高亮行，可用于处理行选中等批量操作，模拟操作系统区域选择行为。非受控属性。TS 类型：Array<string | number>",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "activeRowType": {
      "description": "默认不会高亮点击行，activeRowType=single 表示鼠标点击仅允许同时高亮一行，Shift 键盘操作加鼠标操作依然可以高亮多行，因为这属于明显的区域选择行为。activeRowType= multiple  表示允许鼠标点击同时高亮多行。TS 类型：'single' | 'multiple'",
      "description_zh": "默认不会高亮点击行，activeRowType=single 表示鼠标点击仅允许同时高亮一行，Shift 键盘操作加鼠标操作依然可以高亮多行，因为这属于明显的区域选择行为。activeRowType= multiple  表示允许鼠标点击同时高亮多行。TS 类型：'single' | 'multiple'",
      "default": "-",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "allowResizeColumnWidth": {
      "description": "已废弃。是否允许调整列宽。请更为使用 resizable",
      "description_zh": "已废弃。是否允许调整列宽。请更为使用 resizable",
      "default": "undefined",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "attach": {
      "description": "超出省略等所有浮层元素统一绑定到 attach，可根据实际情况调整挂载元素。TS 类型：AttachNode。通用类型定义",
      "description_zh": "超出省略等所有浮层元素统一绑定到 attach，可根据实际情况调整挂载元素。TS 类型：AttachNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Function",
      "required": false,
      "version": ""
    },
    "bordered": {
      "description": "是否显示表格边框",
      "description_zh": "是否显示表格边框",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "bottomContent": {
      "description": "表格底部内容，可以用于自定义列设置等。TS 类型：string | TNode。通用类型定义",
      "description_zh": "表格底部内容，可以用于自定义列设置等。TS 类型：string | TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "cellEmptyContent": {
      "description": "单元格数据为空时呈现的内容。TS 类型：string | TNode<BaseTableCellParams<T>>。通用类型定义",
      "description_zh": "单元格数据为空时呈现的内容。TS 类型：string | TNode<BaseTableCellParams<T>>。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "columns": {
      "description": "列配置，泛型 T 指表格数据类型。TS 类型：Array<BaseTableCol<T>>",
      "description_zh": "列配置，泛型 T 指表格数据类型。TS 类型：Array<BaseTableCol<T>>",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "data": {
      "description": "数据源，泛型 T 指表格数据类型。TS 类型：Array<T>",
      "description_zh": "数据源，泛型 T 指表格数据类型。TS 类型：Array<T>",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "disableDataPage": {
      "description": "是否禁用本地数据分页。当 data 数据长度超过分页大小时，会自动进行本地数据分页。如果 disableDataPage 设置为 true，则无论何时，都不会进行本地数据分页",
      "description_zh": "是否禁用本地数据分页。当 data 数据长度超过分页大小时，会自动进行本地数据分页。如果 disableDataPage 设置为 true，则无论何时，都不会进行本地数据分页",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "disableSpaceInactiveRow": {
      "description": "默认重复按下 Space 键可取消当前行高亮，是否禁用取消",
      "description_zh": "默认重复按下 Space 键可取消当前行高亮，是否禁用取消",
      "default": "undefined",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "empty": {
      "description": "空表格呈现样式，支持全局配置 GlobalConfigProvider。TS 类型：string | TNode。通用类型定义",
      "description_zh": "空表格呈现样式，支持全局配置 GlobalConfigProvider。TS 类型：string | TNode。通用类型定义",
      "default": "''",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "firstFullRow": {
      "description": "首行内容，横跨所有列。TS 类型：string | TNode。通用类型定义",
      "description_zh": "首行内容，横跨所有列。TS 类型：string | TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "fixedRows": {
      "description": "固定行（冻结行），示例：[M, N]，表示冻结表头 M 行和表尾 N 行。M 和 N 值为 0 时，表示不冻结行。TS 类型：Array<number>",
      "description_zh": "固定行（冻结行），示例：[M, N]，表示冻结表头 M 行和表尾 N 行。M 和 N 值为 0 时，表示不冻结行。TS 类型：Array<number>",
      "default": "-",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "footData": {
      "description": "表尾数据源，泛型 T 指表格数据类型。TS 类型：Array<T>",
      "description_zh": "表尾数据源，泛型 T 指表格数据类型。TS 类型：Array<T>",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "footerAffixProps": {
      "description": "已废弃。请更为使用 footerAffixedBottom。表尾吸底基于 Affix 组件开发，透传全部 Affix 组件属性。。TS 类型：Partial<AffixProps>",
      "description_zh": "已废弃。请更为使用 footerAffixedBottom。表尾吸底基于 Affix 组件开发，透传全部 Affix 组件属性。。TS 类型：Partial<AffixProps>",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "footerAffixedBottom": {
      "description": "表尾吸底。使用此向功能，需要非常注意表格是相对于哪一个父元素进行滚动。值为 true，则表示相对于整个窗口吸底。如果表格滚动的父元素不是整个窗口，请通过 footerAffixedBottom.container 调整固钉的吸顶范围。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：boolean | Partial<AffixProps>",
      "description_zh": "表尾吸底。使用此向功能，需要非常注意表格是相对于哪一个父元素进行滚动。值为 true，则表示相对于整个窗口吸底。如果表格滚动的父元素不是整个窗口，请通过 footerAffixedBottom.container 调整固钉的吸顶范围。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：boolean | Partial<AffixProps>",
      "default": "false",
      "value": "",
      "type": "Boolean / Object",
      "required": false,
      "version": ""
    },
    "footerSummary": {
      "description": "表尾总结行。TS 类型：string | TNode。通用类型定义",
      "description_zh": "表尾总结行。TS 类型：string | TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "headerAffixProps": {
      "description": "已废弃。请更为使用 headerAffixedTop。表头吸顶基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：Partial<AffixProps>，Affix API Documents。详细类型定义",
      "description_zh": "已废弃。请更为使用 headerAffixedTop。表头吸顶基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：Partial<AffixProps>，Affix API Documents。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "headerAffixedTop": {
      "description": "表头吸顶。使用该功能，需要非常注意表格是相对于哪一个父元素进行滚动。值为 true，表示相对于整个窗口吸顶。如果表格滚动的父元素不是整个窗口，请通过 headerAffixedTop.container 调整吸顶的位置。基于 Affix 组件开发，透传全部 Affix 组件属性。。TS 类型：boolean | Partial<AffixProps>",
      "description_zh": "表头吸顶。使用该功能，需要非常注意表格是相对于哪一个父元素进行滚动。值为 true，表示相对于整个窗口吸顶。如果表格滚动的父元素不是整个窗口，请通过 headerAffixedTop.container 调整吸顶的位置。基于 Affix 组件开发，透传全部 Affix 组件属性。。TS 类型：boolean | Partial<AffixProps>",
      "default": "false",
      "value": "",
      "type": "Boolean / Object",
      "required": false,
      "version": ""
    },
    "height": {
      "description": "表格高度，超出后会出现滚动条。示例：100, '30%', '300'。值为数字类型，会自动加上单位 px。如果不是绝对固定表格高度，建议使用 maxHeight",
      "description_zh": "表格高度，超出后会出现滚动条。示例：100, '30%', '300'。值为数字类型，会自动加上单位 px。如果不是绝对固定表格高度，建议使用 maxHeight",
      "default": "-",
      "value": "",
      "type": "String / Number",
      "required": false,
      "version": ""
    },
    "horizontalScrollAffixedBottom": {
      "description": "滚动条吸底。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：boolean | Partial<AffixProps>",
      "description_zh": "滚动条吸底。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：boolean | Partial<AffixProps>",
      "default": "-",
      "value": "",
      "type": "Boolean / Object",
      "required": false,
      "version": ""
    },
    "hover": {
      "description": "是否显示鼠标悬浮状态",
      "description_zh": "是否显示鼠标悬浮状态",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "keyboardRowHover": {
      "description": "键盘操作行显示悬浮效果，一般用于键盘操作行选中、行展开、行高亮等功能",
      "description_zh": "键盘操作行显示悬浮效果，一般用于键盘操作行选中、行展开、行高亮等功能",
      "default": "true",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "lastFullRow": {
      "description": "尾行内容，横跨所有列。TS 类型：string | TNode。通用类型定义",
      "description_zh": "尾行内容，横跨所有列。TS 类型：string | TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "lazyLoad": {
      "description": "是否启用整个表格元素的懒加载，当页面滚动到可视区域后再渲染表格。注意和表格内部行滚动懒加载的区别，内部行滚动无论表格是否在可视区域都会默认渲染第一屏的行元素",
      "description_zh": "是否启用整个表格元素的懒加载，当页面滚动到可视区域后再渲染表格。注意和表格内部行滚动懒加载的区别，内部行滚动无论表格是否在可视区域都会默认渲染第一屏的行元素",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "loading": {
      "description": "加载中状态。值为 true 会显示默认加载中样式，可以通过 Function 和 插槽 自定义加载状态呈现内容和样式。值为 false 则会取消加载状态。TS 类型：boolean | TNode。通用类型定义",
      "description_zh": "加载中状态。值为 true 会显示默认加载中样式，可以通过 Function 和 插槽 自定义加载状态呈现内容和样式。值为 false 则会取消加载状态。TS 类型：boolean | TNode。通用类型定义",
      "default": "undefined",
      "value": "",
      "type": "Boolean / Slot / Function",
      "required": false,
      "version": ""
    },
    "loadingProps": {
      "description": "透传加载组件全部属性。TS 类型：Partial<LoadingProps>，Loading API Documents。详细类型定义",
      "description_zh": "透传加载组件全部属性。TS 类型：Partial<LoadingProps>，Loading API Documents。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "locale": {
      "description": "语言配置。TS 类型：TableConfig，ConfigProvider API Documents。详细类型定义",
      "description_zh": "语言配置。TS 类型：TableConfig，ConfigProvider API Documents。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "maxHeight": {
      "description": "表格最大高度，超出后会出现滚动条。示例：100, '30%', '300'。值为数字类型，会自动加上单位 px",
      "description_zh": "表格最大高度，超出后会出现滚动条。示例：100, '30%', '300'。值为数字类型，会自动加上单位 px",
      "default": "-",
      "value": "",
      "type": "String / Number",
      "required": false,
      "version": ""
    },
    "pagination": {
      "description": "分页配置，值为空则不显示。具体 API 参考分页组件。当 data 数据长度超过分页大小时，会自动对本地数据 data 进行排序，如果不希望对于 data 进行排序，可以设置 disableDataPage = true。TS 类型：PaginationProps，Pagination API Documents。详细类型定义",
      "description_zh": "分页配置，值为空则不显示。具体 API 参考分页组件。当 data 数据长度超过分页大小时，会自动对本地数据 data 进行排序，如果不希望对于 data 进行排序，可以设置 disableDataPage = true。TS 类型：PaginationProps，Pagination API Documents。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "paginationAffixedBottom": {
      "description": "分页吸底。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：boolean | Partial<AffixProps>",
      "description_zh": "分页吸底。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：boolean | Partial<AffixProps>",
      "default": "-",
      "value": "",
      "type": "Boolean / Object",
      "required": false,
      "version": ""
    },
    "resizable": {
      "description": "是否允许调整列宽，设置 tableLayout=fixed 效果更友好，此时不允许通过 CSS 设置 table元素宽度，也不允许设置 tableContentWidth。一般不建议在列宽调整场景使用 tableLayout: auto。如果想要配置宽度可调整的最小值和最大值，请使用 column.resize，示例：columns: [{ resize: { minWidth: 120, maxWidth: 300 } }]。 默认规则：因列宽超出存在横向滚动条时，列宽调整仅影响当前列宽和总列宽；表格列较少没有横向滚动条时，列宽调整表现为自身宽度和相邻宽度变化",
      "description_zh": "是否允许调整列宽，设置 tableLayout=fixed 效果更友好，此时不允许通过 CSS 设置 table元素宽度，也不允许设置 tableContentWidth。一般不建议在列宽调整场景使用 tableLayout: auto。如果想要配置宽度可调整的最小值和最大值，请使用 column.resize，示例：columns: [{ resize: { minWidth: 120, maxWidth: 300 } }]。 默认规则：因列宽超出存在横向滚动条时，列宽调整仅影响当前列宽和总列宽；表格列较少没有横向滚动条时，列宽调整表现为自身宽度和相邻宽度变化",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "rowAttributes": {
      "description": "HTML 标签 tr 的属性。类型为 Function 时，参数说明：params.row 表示行数据；params.rowIndex 表示行下标；params.type=body 表示属性作用于 tbody 中的元素；params.type=foot 表示属性作用于 tfoot 中的元素。示例一：{ draggable: true }，示例二：[{ draggable: true }, { title: '超出省略显示' }]。 示例三：() => [{ draggable: true }]。TS 类型：TableRowAttributes<T> type TableRowAttributes<T> = HTMLElementAttributes | ((params: { row: T; rowIndex: number; type: 'body' | 'foot' }) => HTMLElementAttributes) | Array<TableRowAttributes<T>>。通用类型定义。详细类型定义",
      "description_zh": "HTML 标签 tr 的属性。类型为 Function 时，参数说明：params.row 表示行数据；params.rowIndex 表示行下标；params.type=body 表示属性作用于 tbody 中的元素；params.type=foot 表示属性作用于 tfoot 中的元素。示例一：{ draggable: true }，示例二：[{ draggable: true }, { title: '超出省略显示' }]。 示例三：() => [{ draggable: true }]。TS 类型：TableRowAttributes<T> type TableRowAttributes<T> = HTMLElementAttributes | ((params: { row: T; rowIndex: number; type: 'body' | 'foot' }) => HTMLElementAttributes) | Array<TableRowAttributes<T>>。通用类型定义。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object / Array / Function",
      "required": false,
      "version": ""
    },
    "rowClassName": {
      "description": "行类名，泛型 T 指表格数据类型。params.row 表示行数据；params.rowIndex 表示行下标；params.type=body 表示类名作用于 tbody 中的元素；params.type= tfoot 表示类名作用于 tfoot 中的元素。TS 类型：ClassName | ((params: RowClassNameParams<T>) => ClassName) interface RowClassNameParams<T> { row: T; rowIndex: number; type?: 'body' | 'foot' }。通用类型定义。详细类型定义",
      "description_zh": "行类名，泛型 T 指表格数据类型。params.row 表示行数据；params.rowIndex 表示行下标；params.type=body 表示类名作用于 tbody 中的元素；params.type= tfoot 表示类名作用于 tfoot 中的元素。TS 类型：ClassName | ((params: RowClassNameParams<T>) => ClassName) interface RowClassNameParams<T> { row: T; rowIndex: number; type?: 'body' | 'foot' }。通用类型定义。详细类型定义",
      "default": "-",
      "value": "",
      "type": "String / Object / Array / Function",
      "required": false,
      "version": ""
    },
    "rowKey": {
      "description": "必需。唯一标识一行数据的字段名，来源于 data 中的字段。如果是字段嵌套多层，可以设置形如 item.a.id 的方法",
      "description_zh": "必需。唯一标识一行数据的字段名，来源于 data 中的字段。如果是字段嵌套多层，可以设置形如 item.a.id 的方法",
      "default": "'id'",
      "value": "",
      "type": "String",
      "required": true,
      "version": ""
    },
    "rowspanAndColspan": {
      "description": "用于自定义合并单元格，泛型 T 指表格数据类型。示例：({ row, col, rowIndex, colIndex }) => { rowspan: 2, colspan: 3 }。TS 类型：TableRowspanAndColspanFunc<T> type TableRowspanAndColspanFunc<T> = (params: BaseTableCellParams<T>) => RowspanColspan interface RowspanColspan { colspan?: number; rowspan?: number }。详细类型定义",
      "description_zh": "用于自定义合并单元格，泛型 T 指表格数据类型。示例：({ row, col, rowIndex, colIndex }) => { rowspan: 2, colspan: 3 }。TS 类型：TableRowspanAndColspanFunc<T> type TableRowspanAndColspanFunc<T> = (params: BaseTableCellParams<T>) => RowspanColspan interface RowspanColspan { colspan?: number; rowspan?: number }。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "rowspanAndColspanInFooter": {
      "description": "用于自定义表尾的合并单元格，泛型 T 指表格数据类型。示例：({ row, col, rowIndex, colIndex }) => { rowspan: 2, colspan: 3 }。TS 类型：TableRowspanAndColspanFunc<T>",
      "description_zh": "用于自定义表尾的合并单元格，泛型 T 指表格数据类型。示例：({ row, col, rowIndex, colIndex }) => { rowspan: 2, colspan: 3 }。TS 类型：TableRowspanAndColspanFunc<T>",
      "default": "-",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "scroll": {
      "description": "懒加载和虚拟滚动。为保证组件收益最大化，当数据量小于阈值 scroll.threshold 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动，scroll.threshold 默认为 100。TS 类型：TScroll。通用类型定义",
      "description_zh": "懒加载和虚拟滚动。为保证组件收益最大化，当数据量小于阈值 scroll.threshold 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动，scroll.threshold 默认为 100。TS 类型：TScroll。通用类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "showHeader": {
      "description": "是否显示表头",
      "description_zh": "是否显示表头",
      "default": "true",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "size": {
      "description": "表格尺寸，支持全局配置 GlobalConfigProvider，默认全局配置值为 medium。可选项：small/medium/large。TS 类型：SizeEnum。通用类型定义",
      "description_zh": "表格尺寸，支持全局配置 GlobalConfigProvider，默认全局配置值为 medium。可选项：small/medium/large。TS 类型：SizeEnum。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "stripe": {
      "description": "是否显示斑马纹",
      "description_zh": "是否显示斑马纹",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "tableContentWidth": {
      "description": "表格内容的总宽度，注意不是表格可见宽度。主要应用于 table-layout: auto 模式下的固定列显示。tableContentWidth 内容宽度的值必须大于表格可见宽度",
      "description_zh": "表格内容的总宽度，注意不是表格可见宽度。主要应用于 table-layout: auto 模式下的固定列显示。tableContentWidth 内容宽度的值必须大于表格可见宽度",
      "default": "-",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "tableLayout": {
      "description": "表格布局方式，<table> 元素原生属性。MDN。注意，在列宽调整下场景只能使用 fixed 模式。可选项：auto/fixed",
      "description_zh": "表格布局方式，<table> 元素原生属性。MDN。注意，在列宽调整下场景只能使用 fixed 模式。可选项：auto/fixed",
      "default": "fixed",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "topContent": {
      "description": "表格顶部内容，可以用于自定义列设置、顶部查询条件等。TS 类型：string | TNode。通用类型定义",
      "description_zh": "表格顶部内容，可以用于自定义列设置、顶部查询条件等。TS 类型：string | TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "verticalAlign": {
      "description": "行内容上下方向对齐。可选项：top/middle/bottom",
      "description_zh": "行内容上下方向对齐。可选项：top/middle/bottom",
      "default": "middle",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "onActiveChange": {
      "description": "TS 类型：(activeRowKeys: Array<string | number>, context: ActiveChangeContext<T>) => void高亮行发生变化时触发，泛型 T 指表格数据类型。参数 activeRowList 表示所有高亮行数据， currentRowData 表示当前操作行数据。详细类型定义。interface ActiveChangeContext<T> { activeRowList: Array<{ row: T, rowIndex: number }>; currentRowData?: T; type: 'active' | 'inactive' }",
      "description_zh": "TS 类型：(activeRowKeys: Array<string | number>, context: ActiveChangeContext<T>) => void高亮行发生变化时触发，泛型 T 指表格数据类型。参数 activeRowList 表示所有高亮行数据， currentRowData 表示当前操作行数据。详细类型定义。interface ActiveChangeContext<T> { activeRowList: Array<{ row: T, rowIndex: number }>; currentRowData?: T; type: 'active' | 'inactive' }",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onActiveRowAction": {
      "description": "TS 类型：(context: ActiveRowActionContext<T>) => void键盘操作事件。开启行高亮功能后，会自动开启键盘操作功能，如：通过键盘(Shift)或鼠标操作连续选中高亮行时触发，一般用于处理行选中等批量操作，模拟操作系统区域选择行为。详细类型定义。interface ActiveRowActionContext<T> { action: ActiveRowActionType, activeRowList: Array<{ row: T, rowIndex: number }> }type ActiveRowActionType ='shift-area-selection' | 'space-one-selection' | 'clear' | 'select-all'",
      "description_zh": "TS 类型：(context: ActiveRowActionContext<T>) => void键盘操作事件。开启行高亮功能后，会自动开启键盘操作功能，如：通过键盘(Shift)或鼠标操作连续选中高亮行时触发，一般用于处理行选中等批量操作，模拟操作系统区域选择行为。详细类型定义。interface ActiveRowActionContext<T> { action: ActiveRowActionType, activeRowList: Array<{ row: T, rowIndex: number }> }type ActiveRowActionType ='shift-area-selection' | 'space-one-selection' | 'clear' | 'select-all'",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onCellClick": {
      "description": "TS 类型：(context: BaseTableCellEventContext<T>) => void单元格点击时触发。详细类型定义。interface BaseTableCellEventContext<T> { row: T; col: BaseTableCol; rowIndex: number; colIndex: number; e: MouseEvent }",
      "description_zh": "TS 类型：(context: BaseTableCellEventContext<T>) => void单元格点击时触发。详细类型定义。interface BaseTableCellEventContext<T> { row: T; col: BaseTableCol; rowIndex: number; colIndex: number; e: MouseEvent }",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onColumnResizeChange": {
      "description": "TS 类型：(context: { columnsWidth: { [colKey: string]: number }; }) => void列调整大小之后触发。context.columnsWidth 表示操作后各个列的宽度；",
      "description_zh": "TS 类型：(context: { columnsWidth: { [colKey: string]: number }; }) => void列调整大小之后触发。context.columnsWidth 表示操作后各个列的宽度；",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onPageChange": {
      "description": "TS 类型：(pageInfo: PageInfo, newDataSource: Array<T>) => void分页发生变化时触发。参数 newDataSource 表示分页后的数据。本地数据进行分页时，newDataSource 和源数据 data 会不一样。泛型 T 指表格数据类型",
      "description_zh": "TS 类型：(pageInfo: PageInfo, newDataSource: Array<T>) => void分页发生变化时触发。参数 newDataSource 表示分页后的数据。本地数据进行分页时，newDataSource 和源数据 data 会不一样。泛型 T 指表格数据类型",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onRowClick": {
      "description": "TS 类型：(context: RowEventContext<T>) => void行点击时触发，泛型 T 指表格数据类型。详细类型定义。interface RowEventContext<T> { row: T; index: number; e: MouseEvent | KeyboardEvent }",
      "description_zh": "TS 类型：(context: RowEventContext<T>) => void行点击时触发，泛型 T 指表格数据类型。详细类型定义。interface RowEventContext<T> { row: T; index: number; e: MouseEvent | KeyboardEvent }",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onRowDblclick": {
      "description": "TS 类型：(context: RowEventContext<T>) => void行双击时触发，泛型 T 指表格数据类型",
      "description_zh": "TS 类型：(context: RowEventContext<T>) => void行双击时触发，泛型 T 指表格数据类型",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onRowMousedown": {
      "description": "TS 类型：(context: RowEventContext<T>) => void鼠标在表格行按下时触发，泛型 T 指表格数据类型",
      "description_zh": "TS 类型：(context: RowEventContext<T>) => void鼠标在表格行按下时触发，泛型 T 指表格数据类型",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onRowMouseenter": {
      "description": "TS 类型：(context: RowEventContext<T>) => void鼠标在表格行进入时触发，泛型 T 指表格数据类型",
      "description_zh": "TS 类型：(context: RowEventContext<T>) => void鼠标在表格行进入时触发，泛型 T 指表格数据类型",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onRowMouseleave": {
      "description": "TS 类型：(context: RowEventContext<T>) => void鼠标在表格行离开时触发，泛型 T 指表格数据类型",
      "description_zh": "TS 类型：(context: RowEventContext<T>) => void鼠标在表格行离开时触发，泛型 T 指表格数据类型",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onRowMouseover": {
      "description": "TS 类型：(context: RowEventContext<T>) => void鼠标悬浮到行时触发，泛型 T 指表格数据类型",
      "description_zh": "TS 类型：(context: RowEventContext<T>) => void鼠标悬浮到行时触发，泛型 T 指表格数据类型",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onRowMouseup": {
      "description": "TS 类型：(context: RowEventContext<T>) => void鼠标在表格行按下又弹起时触发，泛型 T 指表格数据类型",
      "description_zh": "TS 类型：(context: RowEventContext<T>) => void鼠标在表格行按下又弹起时触发，泛型 T 指表格数据类型",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onScroll": {
      "description": "TS 类型：(params: { e: WheelEvent }) => void表格内容滚动时触发",
      "description_zh": "TS 类型：(params: { e: WheelEvent }) => void表格内容滚动时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onScrollX": {
      "description": "TS 类型：(params: { e: WheelEvent }) => void已废弃。表格内容横向滚动时触发。请更为使用 onScroll 事件",
      "description_zh": "TS 类型：(params: { e: WheelEvent }) => void已废弃。表格内容横向滚动时触发。请更为使用 onScroll 事件",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onScrollY": {
      "description": "TS 类型：(params: { e: WheelEvent }) => void已废弃。表格内容纵向滚动时触发。当内容超出高度(height)或最大高度(max-height)时，会出现纵向滚动条。请更为使用 onScroll 事件",
      "description_zh": "TS 类型：(params: { e: WheelEvent }) => void已废弃。表格内容纵向滚动时触发。当内容超出高度(height)或最大高度(max-height)时，会出现纵向滚动条。请更为使用 onScroll 事件",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    }
  },
  "link": "https://tdesign.tencent.com/vue/components/table",
  "link_zh": "https://tdesign.tencent.com/vue/components/table",
  "typeDetail": {},
  "events": [
    {
      "name": "active-change",
      "description": "高亮行发生变化时触发，泛型 T 指表格数据类型。参数 activeRowList 表示所有高亮行数据， currentRowData 表示当前操作行数据。详细类型定义。interface ActiveChangeContext<T> { activeRowList: Array<{ row: T, rowIndex: number }>; currentRowData?: T; type: 'active' | 'inactive' }",
      "params": "(activeRowKeys: Array<string | number>, context: ActiveChangeContext<T>)",
      "description_zh": "高亮行发生变化时触发，泛型 T 指表格数据类型。参数 activeRowList 表示所有高亮行数据， currentRowData 表示当前操作行数据。详细类型定义。interface ActiveChangeContext<T> { activeRowList: Array<{ row: T, rowIndex: number }>; currentRowData?: T; type: 'active' | 'inactive' }"
    },
    {
      "name": "active-row-action",
      "description": "键盘操作事件。开启行高亮功能后，会自动开启键盘操作功能，如：通过键盘(Shift)或鼠标操作连续选中高亮行时触发，一般用于处理行选中等批量操作，模拟操作系统区域选择行为。详细类型定义。interface ActiveRowActionContext<T> { action: ActiveRowActionType, activeRowList: Array<{ row: T, rowIndex: number }> }type ActiveRowActionType ='shift-area-selection' | 'space-one-selection' | 'clear' | 'select-all'",
      "params": "(context: ActiveRowActionContext<T>)",
      "description_zh": "键盘操作事件。开启行高亮功能后，会自动开启键盘操作功能，如：通过键盘(Shift)或鼠标操作连续选中高亮行时触发，一般用于处理行选中等批量操作，模拟操作系统区域选择行为。详细类型定义。interface ActiveRowActionContext<T> { action: ActiveRowActionType, activeRowList: Array<{ row: T, rowIndex: number }> }type ActiveRowActionType ='shift-area-selection' | 'space-one-selection' | 'clear' | 'select-all'"
    },
    {
      "name": "cell-click",
      "description": "单元格点击时触发。详细类型定义。interface BaseTableCellEventContext<T> { row: T; col: BaseTableCol; rowIndex: number; colIndex: number; e: MouseEvent }",
      "params": "(context: BaseTableCellEventContext<T>)",
      "description_zh": "单元格点击时触发。详细类型定义。interface BaseTableCellEventContext<T> { row: T; col: BaseTableCol; rowIndex: number; colIndex: number; e: MouseEvent }"
    },
    {
      "name": "column-resize-change",
      "description": "列调整大小之后触发。context.columnsWidth 表示操作后各个列的宽度；",
      "params": "(context: { columnsWidth: { [colKey: string]: number }; })",
      "description_zh": "列调整大小之后触发。context.columnsWidth 表示操作后各个列的宽度；"
    },
    {
      "name": "page-change",
      "description": "分页发生变化时触发。参数 newDataSource 表示分页后的数据。本地数据进行分页时，newDataSource 和源数据 data 会不一样。泛型 T 指表格数据类型",
      "params": "(pageInfo: PageInfo, newDataSource: Array<T>)",
      "description_zh": "分页发生变化时触发。参数 newDataSource 表示分页后的数据。本地数据进行分页时，newDataSource 和源数据 data 会不一样。泛型 T 指表格数据类型"
    },
    {
      "name": "row-click",
      "description": "行点击时触发，泛型 T 指表格数据类型。详细类型定义。interface RowEventContext<T> { row: T; index: number; e: MouseEvent | KeyboardEvent }",
      "params": "(context: RowEventContext<T>)",
      "description_zh": "行点击时触发，泛型 T 指表格数据类型。详细类型定义。interface RowEventContext<T> { row: T; index: number; e: MouseEvent | KeyboardEvent }"
    },
    {
      "name": "row-dblclick",
      "description": "行双击时触发，泛型 T 指表格数据类型",
      "params": "(context: RowEventContext<T>)",
      "description_zh": "行双击时触发，泛型 T 指表格数据类型"
    },
    {
      "name": "row-mousedown",
      "description": "鼠标在表格行按下时触发，泛型 T 指表格数据类型",
      "params": "(context: RowEventContext<T>)",
      "description_zh": "鼠标在表格行按下时触发，泛型 T 指表格数据类型"
    },
    {
      "name": "row-mouseenter",
      "description": "鼠标在表格行进入时触发，泛型 T 指表格数据类型",
      "params": "(context: RowEventContext<T>)",
      "description_zh": "鼠标在表格行进入时触发，泛型 T 指表格数据类型"
    },
    {
      "name": "row-mouseleave",
      "description": "鼠标在表格行离开时触发，泛型 T 指表格数据类型",
      "params": "(context: RowEventContext<T>)",
      "description_zh": "鼠标在表格行离开时触发，泛型 T 指表格数据类型"
    },
    {
      "name": "row-mouseover",
      "description": "鼠标悬浮到行时触发，泛型 T 指表格数据类型",
      "params": "(context: RowEventContext<T>)",
      "description_zh": "鼠标悬浮到行时触发，泛型 T 指表格数据类型"
    },
    {
      "name": "row-mouseup",
      "description": "鼠标在表格行按下又弹起时触发，泛型 T 指表格数据类型",
      "params": "(context: RowEventContext<T>)",
      "description_zh": "鼠标在表格行按下又弹起时触发，泛型 T 指表格数据类型"
    },
    {
      "name": "scroll",
      "description": "表格内容滚动时触发",
      "params": "(params: { e: WheelEvent })",
      "description_zh": "表格内容滚动时触发"
    },
    {
      "name": "scroll-x",
      "description": "已废弃。表格内容横向滚动时触发。请更为使用 onScroll 事件",
      "params": "(params: { e: WheelEvent })",
      "description_zh": "已废弃。表格内容横向滚动时触发。请更为使用 onScroll 事件"
    },
    {
      "name": "scroll-y",
      "description": "已废弃。表格内容纵向滚动时触发。当内容超出高度(height)或最大高度(max-height)时，会出现纵向滚动条。请更为使用 onScroll 事件",
      "params": "(params: { e: WheelEvent })",
      "description_zh": "已废弃。表格内容纵向滚动时触发。当内容超出高度(height)或最大高度(max-height)时，会出现纵向滚动条。请更为使用 onScroll 事件"
    }
  ],
  "methods": [],
  "slots": [],
  "suggestions": [],
  "filename": "BaseTable"
}
