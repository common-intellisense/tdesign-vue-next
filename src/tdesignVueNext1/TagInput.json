{
  "name": "TTagInput",
  "props": {
    "autoWidth": {
      "description": "宽度随内容自适应",
      "description_zh": "宽度随内容自适应",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "borderless": {
      "description": "无边框模式",
      "description_zh": "无边框模式",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "clearable": {
      "description": "是否可清空",
      "description_zh": "是否可清空",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "collapsedItems": {
      "description": "标签过多的情况下，折叠项内容，默认为 +N。如果需要悬浮就显示其他内容，可以使用 collapsedItems 自定义。value 表示当前存在的所有标签，collapsedSelectedItems 表示折叠的标签，count 表示折叠的数量，onClose 表示移除标签的事件回调。TS 类型：TNode<{ value: TagInputValue; collapsedSelectedItems: TagInputValue; count: number; onClose: (context: { index: number, e?: MouseEvent }) => void }>。通用类型定义",
      "description_zh": "标签过多的情况下，折叠项内容，默认为 +N。如果需要悬浮就显示其他内容，可以使用 collapsedItems 自定义。value 表示当前存在的所有标签，collapsedSelectedItems 表示折叠的标签，count 表示折叠的数量，onClose 表示移除标签的事件回调。TS 类型：TNode<{ value: TagInputValue; collapsedSelectedItems: TagInputValue; count: number; onClose: (context: { index: number, e?: MouseEvent }) => void }>。通用类型定义",
      "default": "-",
      "value": "",
      "type": "Slot / Function",
      "required": false,
      "version": ""
    },
    "disabled": {
      "description": "是否禁用标签输入框",
      "description_zh": "是否禁用标签输入框",
      "default": "undefined",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "dragSort": {
      "description": "拖拽调整标签顺序",
      "description_zh": "拖拽调整标签顺序",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "excessTagsDisplayType": {
      "description": "标签超出时的呈现方式，有两种：横向滚动显示 和 换行显示。可选项：scroll/break-line",
      "description_zh": "标签超出时的呈现方式，有两种：横向滚动显示 和 换行显示。可选项：scroll/break-line",
      "default": "break-line",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "inputProps": {
      "description": "透传 Input 输入框组件全部属性。TS 类型：InputProps，Input API Documents。详细类型定义",
      "description_zh": "透传 Input 输入框组件全部属性。TS 类型：InputProps，Input API Documents。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "inputValue": {
      "description": "输入框的值。支持语法糖 .sync。TS 类型：string",
      "description_zh": "输入框的值。支持语法糖 .sync。TS 类型：string",
      "default": "''",
      "value": "",
      "type": "String / Number",
      "required": false,
      "version": ""
    },
    "defaultInputValue": {
      "description": "输入框的值。非受控属性。TS 类型：string",
      "description_zh": "输入框的值。非受控属性。TS 类型：string",
      "default": "''",
      "value": "",
      "type": "String / Number",
      "required": false,
      "version": ""
    },
    "label": {
      "description": "左侧文本。TS 类型：string | TNode。通用类型定义",
      "description_zh": "左侧文本。TS 类型：string | TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "max": {
      "description": "最大允许输入的标签数量",
      "description_zh": "最大允许输入的标签数量",
      "default": "-",
      "value": "",
      "type": "Number",
      "required": false,
      "version": ""
    },
    "minCollapsedNum": {
      "description": "最小折叠数量，用于标签数量过多的情况下折叠选中项，超出该数值的选中项折叠。值为 0 则表示不折叠",
      "description_zh": "最小折叠数量，用于标签数量过多的情况下折叠选中项，超出该数值的选中项折叠。值为 0 则表示不折叠",
      "default": "0",
      "value": "",
      "type": "Number",
      "required": false,
      "version": ""
    },
    "placeholder": {
      "description": "占位符",
      "description_zh": "占位符",
      "default": "undefined",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "prefixIcon": {
      "description": "组件前置图标。TS 类型：TNode。通用类型定义",
      "description_zh": "组件前置图标。TS 类型：TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "Slot / Function",
      "required": false,
      "version": ""
    },
    "readonly": {
      "description": "只读状态，值为真会隐藏标签移除按钮和输入框",
      "description_zh": "只读状态，值为真会隐藏标签移除按钮和输入框",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "size": {
      "description": "组件尺寸。可选项：small/medium/large。TS 类型：SizeEnum。通用类型定义",
      "description_zh": "组件尺寸。可选项：small/medium/large。TS 类型：SizeEnum。通用类型定义",
      "default": "medium",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "status": {
      "description": "输入框状态。可选项：default/success/warning/error",
      "description_zh": "输入框状态。可选项：default/success/warning/error",
      "default": "-",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "suffix": {
      "description": "后置图标前的后置内容。TS 类型：string | TNode。通用类型定义",
      "description_zh": "后置图标前的后置内容。TS 类型：string | TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "suffixIcon": {
      "description": "组件后置图标。TS 类型：TNode。通用类型定义",
      "description_zh": "组件后置图标。TS 类型：TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "Slot / Function",
      "required": false,
      "version": ""
    },
    "tag": {
      "description": "自定义标签的内部内容，每一个标签的当前值。注意和 valueDisplay 区分，valueDisplay 是用来定义全部标签内容，而非某一个标签。TS 类型：string | TNode<{ value: string | number }>。通用类型定义",
      "description_zh": "自定义标签的内部内容，每一个标签的当前值。注意和 valueDisplay 区分，valueDisplay 是用来定义全部标签内容，而非某一个标签。TS 类型：string | TNode<{ value: string | number }>。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "tagProps": {
      "description": "透传 Tag 组件全部属性。TS 类型：TagProps，Tag API Documents。详细类型定义",
      "description_zh": "透传 Tag 组件全部属性。TS 类型：TagProps，Tag API Documents。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "tips": {
      "description": "输入框下方提示文本，会根据不同的 status 呈现不同的样式。TS 类型：string | TNode。通用类型定义",
      "description_zh": "输入框下方提示文本，会根据不同的 status 呈现不同的样式。TS 类型：string | TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "value": {
      "description": "值。支持语法糖 v-model。TS 类型：TagInputValue type TagInputValue = Array<string | number>。详细类型定义",
      "description_zh": "值。支持语法糖 v-model。TS 类型：TagInputValue type TagInputValue = Array<string | number>。详细类型定义",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "defaultValue": {
      "description": "值。非受控属性。TS 类型：TagInputValue type TagInputValue = Array<string | number>。详细类型定义",
      "description_zh": "值。非受控属性。TS 类型：TagInputValue type TagInputValue = Array<string | number>。详细类型定义",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "valueDisplay": {
      "description": "自定义值呈现的全部内容，参数为所有标签的值。TS 类型：string | TNode<{ value: TagInputValue; onClose: (index: number, item?: any) => void }>。通用类型定义",
      "description_zh": "自定义值呈现的全部内容，参数为所有标签的值。TS 类型：string | TNode<{ value: TagInputValue; onClose: (index: number, item?: any) => void }>。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "onBlur": {
      "description": "TS 类型：(value: TagInputValue, context: { inputValue: string; e: FocusEvent }) => void失去焦点时触发",
      "description_zh": "TS 类型：(value: TagInputValue, context: { inputValue: string; e: FocusEvent }) => void失去焦点时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onChange": {
      "description": "TS 类型：(value: TagInputValue, context: TagInputChangeContext) => void值变化时触发，参数 context.trigger 表示数据变化的触发来源；context.index 指当前变化项的下标；context.item 指当前变化项；context.e 表示事件参数。详细类型定义。interface TagInputChangeContext { trigger: TagInputTriggerSource; index?: number; item?: string | number; e?: MouseEvent | KeyboardEvent }type TagInputTriggerSource = 'enter' | 'tag-remove' | 'backspace' | 'clear'",
      "description_zh": "TS 类型：(value: TagInputValue, context: TagInputChangeContext) => void值变化时触发，参数 context.trigger 表示数据变化的触发来源；context.index 指当前变化项的下标；context.item 指当前变化项；context.e 表示事件参数。详细类型定义。interface TagInputChangeContext { trigger: TagInputTriggerSource; index?: number; item?: string | number; e?: MouseEvent | KeyboardEvent }type TagInputTriggerSource = 'enter' | 'tag-remove' | 'backspace' | 'clear'",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onClear": {
      "description": "TS 类型：(context: { e: MouseEvent }) => void清空按钮点击时触发",
      "description_zh": "TS 类型：(context: { e: MouseEvent }) => void清空按钮点击时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onClick": {
      "description": "TS 类型：(context: { e: MouseEvent }) => void点击组件时触发",
      "description_zh": "TS 类型：(context: { e: MouseEvent }) => void点击组件时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onDragSort": {
      "description": "TS 类型：(context: TagInputDragSortContext) => void【开发中】拖拽排序时触发。详细类型定义。interface TagInputDragSortContext { newTags: TagInputValue; currentIndex: number; current: string | number; targetIndex: number; target: string | number }",
      "description_zh": "TS 类型：(context: TagInputDragSortContext) => void【开发中】拖拽排序时触发。详细类型定义。interface TagInputDragSortContext { newTags: TagInputValue; currentIndex: number; current: string | number; targetIndex: number; target: string | number }",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onEnter": {
      "description": "TS 类型：(value: TagInputValue, context: { e: KeyboardEvent; inputValue: string }) => void按键按下 Enter 时触发",
      "description_zh": "TS 类型：(value: TagInputValue, context: { e: KeyboardEvent; inputValue: string }) => void按键按下 Enter 时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onFocus": {
      "description": "TS 类型：(value: TagInputValue, context: { inputValue: string; e: FocusEvent }) => void聚焦时触发",
      "description_zh": "TS 类型：(value: TagInputValue, context: { inputValue: string; e: FocusEvent }) => void聚焦时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onInputChange": {
      "description": "TS 类型：(value: string, context?: InputValueChangeContext) => void输入框值发生变化时触发，context.trigger 表示触发输入框值变化的来源：文本输入触发、清除按钮触发、回车键触发等。详细类型定义。interface InputValueChangeContext { e?: InputEvent | MouseEvent | CompositionEvent | KeyboardEvent; trigger: 'input' | 'clear' | 'enter' | 'blur' }",
      "description_zh": "TS 类型：(value: string, context?: InputValueChangeContext) => void输入框值发生变化时触发，context.trigger 表示触发输入框值变化的来源：文本输入触发、清除按钮触发、回车键触发等。详细类型定义。interface InputValueChangeContext { e?: InputEvent | MouseEvent | CompositionEvent | KeyboardEvent; trigger: 'input' | 'clear' | 'enter' | 'blur' }",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onMouseenter": {
      "description": "TS 类型：(context: { e: MouseEvent }) => void进入输入框时触发",
      "description_zh": "TS 类型：(context: { e: MouseEvent }) => void进入输入框时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onMouseleave": {
      "description": "TS 类型：(context: { e: MouseEvent }) => void离开输入框时触发",
      "description_zh": "TS 类型：(context: { e: MouseEvent }) => void离开输入框时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onPaste": {
      "description": "TS 类型：(context: { e: ClipboardEvent; pasteValue: string }) => void粘贴事件，pasteValue 表示粘贴板的内容",
      "description_zh": "TS 类型：(context: { e: ClipboardEvent; pasteValue: string }) => void粘贴事件，pasteValue 表示粘贴板的内容",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onRemove": {
      "description": "TS 类型：(context: TagInputRemoveContext) => void移除单个标签时触发。详细类型定义。interface TagInputRemoveContext { value: TagInputValue; index: number; item: string | number; e?: MouseEvent | KeyboardEvent; trigger: TagInputRemoveTrigger }type TagInputRemoveTrigger = 'tag-remove' | 'backspace'",
      "description_zh": "TS 类型：(context: TagInputRemoveContext) => void移除单个标签时触发。详细类型定义。interface TagInputRemoveContext { value: TagInputValue; index: number; item: string | number; e?: MouseEvent | KeyboardEvent; trigger: TagInputRemoveTrigger }type TagInputRemoveTrigger = 'tag-remove' | 'backspace'",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    }
  },
  "link": "https://tdesign.tencent.com/vue/components/tag-input",
  "link_zh": "https://tdesign.tencent.com/vue/components/tag-input",
  "typeDetail": {},
  "events": [
    {
      "name": "blur",
      "description": "失去焦点时触发",
      "params": "(value: TagInputValue, context: { inputValue: string; e: FocusEvent })",
      "description_zh": "失去焦点时触发"
    },
    {
      "name": "change",
      "description": "值变化时触发，参数 context.trigger 表示数据变化的触发来源；context.index 指当前变化项的下标；context.item 指当前变化项；context.e 表示事件参数。详细类型定义。interface TagInputChangeContext { trigger: TagInputTriggerSource; index?: number; item?: string | number; e?: MouseEvent | KeyboardEvent }type TagInputTriggerSource = 'enter' | 'tag-remove' | 'backspace' | 'clear'",
      "params": "(value: TagInputValue, context: TagInputChangeContext)",
      "description_zh": "值变化时触发，参数 context.trigger 表示数据变化的触发来源；context.index 指当前变化项的下标；context.item 指当前变化项；context.e 表示事件参数。详细类型定义。interface TagInputChangeContext { trigger: TagInputTriggerSource; index?: number; item?: string | number; e?: MouseEvent | KeyboardEvent }type TagInputTriggerSource = 'enter' | 'tag-remove' | 'backspace' | 'clear'"
    },
    {
      "name": "clear",
      "description": "清空按钮点击时触发",
      "params": "(context: { e: MouseEvent })",
      "description_zh": "清空按钮点击时触发"
    },
    {
      "name": "click",
      "description": "点击组件时触发",
      "params": "(context: { e: MouseEvent })",
      "description_zh": "点击组件时触发"
    },
    {
      "name": "drag-sort",
      "description": "【开发中】拖拽排序时触发。详细类型定义。interface TagInputDragSortContext { newTags: TagInputValue; currentIndex: number; current: string | number; targetIndex: number; target: string | number }",
      "params": "(context: TagInputDragSortContext)",
      "description_zh": "【开发中】拖拽排序时触发。详细类型定义。interface TagInputDragSortContext { newTags: TagInputValue; currentIndex: number; current: string | number; targetIndex: number; target: string | number }"
    },
    {
      "name": "enter",
      "description": "按键按下 Enter 时触发",
      "params": "(value: TagInputValue, context: { e: KeyboardEvent; inputValue: string })",
      "description_zh": "按键按下 Enter 时触发"
    },
    {
      "name": "focus",
      "description": "聚焦时触发",
      "params": "(value: TagInputValue, context: { inputValue: string; e: FocusEvent })",
      "description_zh": "聚焦时触发"
    },
    {
      "name": "input-change",
      "description": "输入框值发生变化时触发，context.trigger 表示触发输入框值变化的来源：文本输入触发、清除按钮触发、回车键触发等。详细类型定义。interface InputValueChangeContext { e?: InputEvent | MouseEvent | CompositionEvent | KeyboardEvent; trigger: 'input' | 'clear' | 'enter' | 'blur' }",
      "params": "(value: string, context?: InputValueChangeContext)",
      "description_zh": "输入框值发生变化时触发，context.trigger 表示触发输入框值变化的来源：文本输入触发、清除按钮触发、回车键触发等。详细类型定义。interface InputValueChangeContext { e?: InputEvent | MouseEvent | CompositionEvent | KeyboardEvent; trigger: 'input' | 'clear' | 'enter' | 'blur' }"
    },
    {
      "name": "mouseenter",
      "description": "进入输入框时触发",
      "params": "(context: { e: MouseEvent })",
      "description_zh": "进入输入框时触发"
    },
    {
      "name": "mouseleave",
      "description": "离开输入框时触发",
      "params": "(context: { e: MouseEvent })",
      "description_zh": "离开输入框时触发"
    },
    {
      "name": "paste",
      "description": "粘贴事件，pasteValue 表示粘贴板的内容",
      "params": "(context: { e: ClipboardEvent; pasteValue: string })",
      "description_zh": "粘贴事件，pasteValue 表示粘贴板的内容"
    },
    {
      "name": "remove",
      "description": "移除单个标签时触发。详细类型定义。interface TagInputRemoveContext { value: TagInputValue; index: number; item: string | number; e?: MouseEvent | KeyboardEvent; trigger: TagInputRemoveTrigger }type TagInputRemoveTrigger = 'tag-remove' | 'backspace'",
      "params": "(context: TagInputRemoveContext)",
      "description_zh": "移除单个标签时触发。详细类型定义。interface TagInputRemoveContext { value: TagInputValue; index: number; item: string | number; e?: MouseEvent | KeyboardEvent; trigger: TagInputRemoveTrigger }type TagInputRemoveTrigger = 'tag-remove' | 'backspace'"
    }
  ],
  "methods": [],
  "slots": [],
  "suggestions": [],
  "filename": "TagInput"
}
