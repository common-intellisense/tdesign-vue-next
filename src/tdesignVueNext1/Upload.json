{
  "name": "TUpload",
  "props": {
    "abridgeName": {
      "description": "文件名过长时，需要省略中间的文本，保留首尾文本。示例：[10, 7]，表示首尾分别保留的文本长度。TS 类型：Array<number>",
      "description_zh": "文件名过长时，需要省略中间的文本，保留首尾文本。示例：[10, 7]，表示首尾分别保留的文本长度。TS 类型：Array<number>",
      "default": "-",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "accept": {
      "description": "接受上传的文件类型，查看 W3C示例，查看 MDN 示例",
      "description_zh": "接受上传的文件类型，查看 W3C示例，查看 MDN 示例",
      "default": "-",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "action": {
      "description": "上传接口。设接口响应数据为字段 response，那么 response.error 存在时会判断此次上传失败，并显示错误文本信息；response.url 会作为文件上传成功后的地址，并使用该地址显示图片或文件",
      "description_zh": "上传接口。设接口响应数据为字段 response，那么 response.error 存在时会判断此次上传失败，并显示错误文本信息；response.url 会作为文件上传成功后的地址，并使用该地址显示图片或文件",
      "default": "-",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "allowUploadDuplicateFile": {
      "description": "是否允许重复上传相同文件名的文件",
      "description_zh": "是否允许重复上传相同文件名的文件",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "autoUpload": {
      "description": "是否在选择文件后自动发起请求上传文件",
      "description_zh": "是否在选择文件后自动发起请求上传文件",
      "default": "true",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "beforeAllFilesUpload": {
      "description": "如果是自动上传模式 autoUpload=true，表示全部文件上传之前的钩子函数，函数参数为上传的文件，函数返回值决定是否继续上传，若返回值为 false 则终止上传。如果是非自动上传模式 autoUpload=false，则函数返回值为 false 时表示本次选中的文件不会加入到文件列表中，即不触发 onChange 事件。TS 类型：(file: UploadFile[]) => boolean | Promise<boolean>",
      "description_zh": "如果是自动上传模式 autoUpload=true，表示全部文件上传之前的钩子函数，函数参数为上传的文件，函数返回值决定是否继续上传，若返回值为 false 则终止上传。如果是非自动上传模式 autoUpload=false，则函数返回值为 false 时表示本次选中的文件不会加入到文件列表中，即不触发 onChange 事件。TS 类型：(file: UploadFile[]) => boolean | Promise<boolean>",
      "default": "-",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "beforeUpload": {
      "description": "如果是自动上传模式 autoUpload=true，表示单个文件上传之前的钩子函数，若函数返回值为 false 则表示不上传当前文件。如果是非自动上传模式 autoUpload=false，函数返回值为 false 时表示从上传文件中剔除当前文件。TS 类型：(file: UploadFile) => boolean | Promise<boolean>",
      "description_zh": "如果是自动上传模式 autoUpload=true，表示单个文件上传之前的钩子函数，若函数返回值为 false 则表示不上传当前文件。如果是非自动上传模式 autoUpload=false，函数返回值为 false 时表示从上传文件中剔除当前文件。TS 类型：(file: UploadFile) => boolean | Promise<boolean>",
      "default": "-",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "cancelUploadButton": {
      "description": "批量文件/图片上传，autoUpload=false 场景下，透传“取消上传”按钮属性。TS 类型：null | ButtonProps | TNode<{ disabled: boolean; cancelUploadText: string; cancelUpload: (ctx: { e: MouseEvent }) => void }>。通用类型定义",
      "description_zh": "批量文件/图片上传，autoUpload=false 场景下，透传“取消上传”按钮属性。TS 类型：null | ButtonProps | TNode<{ disabled: boolean; cancelUploadText: string; cancelUpload: (ctx: { e: MouseEvent }) => void }>。通用类型定义",
      "default": "-",
      "value": "",
      "type": "Object / Slot / Function",
      "required": false,
      "version": ""
    },
    "data": {
      "description": "上传请求所需的额外字段，默认字段有 file，表示文件信息。可以添加额外的文件名字段，如：{file_name: \"custom-file-name.txt\"}。autoUpload=true 时有效。也可以使用 formatRequest 完全自定义上传请求的字段。TS 类型：Record<string, any> | ((files: UploadFile[]) => Record<string, any>)",
      "description_zh": "上传请求所需的额外字段，默认字段有 file，表示文件信息。可以添加额外的文件名字段，如：{file_name: \"custom-file-name.txt\"}。autoUpload=true 时有效。也可以使用 formatRequest 完全自定义上传请求的字段。TS 类型：Record<string, any> | ((files: UploadFile[]) => Record<string, any>)",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "default": {
      "description": "非拖拽场景，指触发上传的元素，如：“选择文件”。如果是拖拽场景，则是指拖拽区域。TS 类型：string | TNode。通用类型定义",
      "description_zh": "非拖拽场景，指触发上传的元素，如：“选择文件”。如果是拖拽场景，则是指拖拽区域。TS 类型：string | TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "disabled": {
      "description": "是否禁用",
      "description_zh": "是否禁用",
      "default": "-",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "dragContent": {
      "description": "用于自定义拖拽区域，theme=custom 且 draggable=true 时有效。TS 类型：TNode | TNode<TriggerContext>。通用类型定义",
      "description_zh": "用于自定义拖拽区域，theme=custom 且 draggable=true 时有效。TS 类型：TNode | TNode<TriggerContext>。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "draggable": {
      "description": "是否启用拖拽上传，不同的组件风格默认值不同。theme=file 或 theme=image 时有效",
      "description_zh": "是否启用拖拽上传，不同的组件风格默认值不同。theme=file 或 theme=image 时有效",
      "default": "undefined",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "fileListDisplay": {
      "description": "用于完全自定义文件列表界面内容(UI)，单文件和多文件均有效。TS 类型：TNode<{ files: UploadFile[]; dragEvents?: UploadDisplayDragEvents }>。通用类型定义",
      "description_zh": "用于完全自定义文件列表界面内容(UI)，单文件和多文件均有效。TS 类型：TNode<{ files: UploadFile[]; dragEvents?: UploadDisplayDragEvents }>。通用类型定义",
      "default": "-",
      "value": "",
      "type": "Slot / Function",
      "required": false,
      "version": ""
    },
    "files": {
      "description": "已上传文件列表，同 value。TS 类型：UploadFile。支持语法糖 .sync。TS 类型：Array<T>",
      "description_zh": "已上传文件列表，同 value。TS 类型：UploadFile。支持语法糖 .sync。TS 类型：Array<T>",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "defaultFiles": {
      "description": "已上传文件列表，同 value。TS 类型：UploadFile。非受控属性。TS 类型：Array<T>",
      "description_zh": "已上传文件列表，同 value。TS 类型：UploadFile。非受控属性。TS 类型：Array<T>",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "format": {
      "description": "转换文件 UploadFile 的数据结构，可新增或修改 UploadFile 的属性，注意不能删除 UploadFile 属性。action 存在时有效。TS 类型：(file: File) => UploadFile",
      "description_zh": "转换文件 UploadFile 的数据结构，可新增或修改 UploadFile 的属性，注意不能删除 UploadFile 属性。action 存在时有效。TS 类型：(file: File) => UploadFile",
      "default": "-",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "formatRequest": {
      "description": "用于新增或修改文件上传请求 参数。action 存在时有效。一个请求上传一个文件时，默认请求字段有 file。一个请求上传多个文件时，默认字段有 file[0]/file[1]/file[2]/.../length，其中 length 表示本次上传的文件数量。⚠️非常注意，此处的 file[0]/file[1] 仅仅是一个字段名，并非表示 file 是一个数组，接口获取字段时注意区分。可以使用 name 定义 file 字段的别名。也可以使用 formatRequest 自定义任意字段，如添加一个字段 fileList ，存储文件数组。TS 类型：(requestData: { [key: string]: any }) => { [key: string]: any }",
      "description_zh": "用于新增或修改文件上传请求 参数。action 存在时有效。一个请求上传一个文件时，默认请求字段有 file。一个请求上传多个文件时，默认字段有 file[0]/file[1]/file[2]/.../length，其中 length 表示本次上传的文件数量。⚠️非常注意，此处的 file[0]/file[1] 仅仅是一个字段名，并非表示 file 是一个数组，接口获取字段时注意区分。可以使用 name 定义 file 字段的别名。也可以使用 formatRequest 自定义任意字段，如添加一个字段 fileList ，存储文件数组。TS 类型：(requestData: { [key: string]: any }) => { [key: string]: any }",
      "default": "-",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "formatResponse": {
      "description": "用于格式化文件上传后的接口响应数据，response 便是接口响应的原始数据。action 存在时有效。 示例返回值：{ error, url, status, files }  此函数的返回值 error 会作为错误文本提醒，表示上传失败的原因，如果存在会判定为本次上传失败。 此函数的返回值 url 会作为单个文件上传成功后的链接。 files 表示一个请求同时上传多个文件后的文件列表。TS 类型：(response: any, context: FormatResponseContext) => ResponseType  type ResponseType = { error?: string; url?: string; status?: 'fail' | 'success'; files?: UploadFile[] } & Record<string, any> interface FormatResponseContext { file: UploadFile; currentFiles?: UploadFile[] }。详细类型定义",
      "description_zh": "用于格式化文件上传后的接口响应数据，response 便是接口响应的原始数据。action 存在时有效。 示例返回值：{ error, url, status, files }  此函数的返回值 error 会作为错误文本提醒，表示上传失败的原因，如果存在会判定为本次上传失败。 此函数的返回值 url 会作为单个文件上传成功后的链接。 files 表示一个请求同时上传多个文件后的文件列表。TS 类型：(response: any, context: FormatResponseContext) => ResponseType  type ResponseType = { error?: string; url?: string; status?: 'fail' | 'success'; files?: UploadFile[] } & Record<string, any> interface FormatResponseContext { file: UploadFile; currentFiles?: UploadFile[] }。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "headers": {
      "description": "设置上传的请求头部，action 存在时有效。TS 类型：{[key: string]: string}",
      "description_zh": "设置上传的请求头部，action 存在时有效。TS 类型：{[key: string]: string}",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "imageViewerProps": {
      "description": "透传图片预览组件全部属性。TS 类型：ImageViewerProps，ImageViewer API Documents。详细类型定义",
      "description_zh": "透传图片预览组件全部属性。TS 类型：ImageViewerProps，ImageViewer API Documents。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "inputAttributes": {
      "description": "用于添加属性到 HTML 元素 input。TS 类型：CSSProperties",
      "description_zh": "用于添加属性到 HTML 元素 input。TS 类型：CSSProperties",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "isBatchUpload": {
      "description": "多个文件是否作为一个独立文件包，整体替换，整体删除。不允许追加文件，只允许替换文件。theme=file-flow 时有效",
      "description_zh": "多个文件是否作为一个独立文件包，整体替换，整体删除。不允许追加文件，只允许替换文件。theme=file-flow 时有效",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "locale": {
      "description": "上传组件文本语言配置，支持自定义配置组件中的全部文本。优先级高于全局配置中语言。TS 类型：UploadConfig import { UploadConfig } from '../config-provider/type'。详细类型定义",
      "description_zh": "上传组件文本语言配置，支持自定义配置组件中的全部文本。优先级高于全局配置中语言。TS 类型：UploadConfig import { UploadConfig } from '../config-provider/type'。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "max": {
      "description": "用于控制文件上传数量，值为 0 则不限制。注意，单文件上传场景，请勿设置 max 属性",
      "description_zh": "用于控制文件上传数量，值为 0 则不限制。注意，单文件上传场景，请勿设置 max 属性",
      "default": "0",
      "value": "",
      "type": "Number",
      "required": false,
      "version": ""
    },
    "method": {
      "description": "HTTP 请求类型。可选项：POST/GET/PUT/OPTIONS/PATCH/post/get/put/options/patch",
      "description_zh": "HTTP 请求类型。可选项：POST/GET/PUT/OPTIONS/PATCH/post/get/put/options/patch",
      "default": "POST",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "mockProgressDuration": {
      "description": "模拟进度间隔时间，单位：毫秒，默认：300。由于原始的上传请求，小文件上传进度只有 0 和 100，故而新增模拟进度，每间隔 mockProgressDuration 毫秒刷新一次模拟进度。小文件设置小一点，大文件设置大一点。注意：当 useMockProgress 为真时，当前设置有效",
      "description_zh": "模拟进度间隔时间，单位：毫秒，默认：300。由于原始的上传请求，小文件上传进度只有 0 和 100，故而新增模拟进度，每间隔 mockProgressDuration 毫秒刷新一次模拟进度。小文件设置小一点，大文件设置大一点。注意：当 useMockProgress 为真时，当前设置有效",
      "default": "-",
      "value": "",
      "type": "Number",
      "required": false,
      "version": ""
    },
    "multiple": {
      "description": "支持多文件上传",
      "description_zh": "支持多文件上传",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "name": {
      "description": "文件上传时的名称",
      "description_zh": "文件上传时的名称",
      "default": "file",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "placeholder": {
      "description": "占位符",
      "description_zh": "占位符",
      "default": "-",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "requestMethod": {
      "description": "自定义上传方法。返回值 status 表示上传成功或失败；error 或 response.error 表示上传失败的原因；response 表示请求上传成功后的返回数据，response.url 表示上传成功后的图片/文件地址，response.files 表示一个请求上传多个文件/图片后的返回值。示例一：{ status: 'fail', error: '上传失败', response }。示例二：{ status: 'success', response: { url: 'https://tdesign.gtimg.com/site/avatar.jpg' } }。 示例三：{ status: 'success', files: [{ url: 'https://xxx.png', name: 'xxx.png' }]}。TS 类型：(files: UploadFile | UploadFile[]) => Promise<RequestMethodResponse> interface RequestMethodResponse { status: 'success' | 'fail'; error?: string; response: { url?: string; files?: UploadFile[]; [key: string]: any } }。详细类型定义",
      "description_zh": "自定义上传方法。返回值 status 表示上传成功或失败；error 或 response.error 表示上传失败的原因；response 表示请求上传成功后的返回数据，response.url 表示上传成功后的图片/文件地址，response.files 表示一个请求上传多个文件/图片后的返回值。示例一：{ status: 'fail', error: '上传失败', response }。示例二：{ status: 'success', response: { url: 'https://tdesign.gtimg.com/site/avatar.jpg' } }。 示例三：{ status: 'success', files: [{ url: 'https://xxx.png', name: 'xxx.png' }]}。TS 类型：(files: UploadFile | UploadFile[]) => Promise<RequestMethodResponse> interface RequestMethodResponse { status: 'success' | 'fail'; error?: string; response: { url?: string; files?: UploadFile[]; [key: string]: any } }。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "showImageFileName": {
      "description": "是否显示图片的文件名称",
      "description_zh": "是否显示图片的文件名称",
      "default": "true",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "showThumbnail": {
      "description": "是否在文件列表中显示缩略图，theme=file-flow 时有效",
      "description_zh": "是否在文件列表中显示缩略图，theme=file-flow 时有效",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "showUploadProgress": {
      "description": "是否显示上传进度",
      "description_zh": "是否显示上传进度",
      "default": "true",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "sizeLimit": {
      "description": "图片文件大小限制，默认单位 KB。可选单位有：'B' | 'KB' | 'MB' | 'GB'。示例一：1000。示例二：{ size: 2, unit: 'MB', message: '图片大小不超过 {sizeLimit} MB' }。TS 类型：number | SizeLimitObj interface SizeLimitObj { size: number; unit: SizeUnit ; message?: string } type SizeUnitArray = ['B', 'KB', 'MB', 'GB'] type SizeUnit = SizeUnitArray[number]。详细类型定义",
      "description_zh": "图片文件大小限制，默认单位 KB。可选单位有：'B' | 'KB' | 'MB' | 'GB'。示例一：1000。示例二：{ size: 2, unit: 'MB', message: '图片大小不超过 {sizeLimit} MB' }。TS 类型：number | SizeLimitObj interface SizeLimitObj { size: number; unit: SizeUnit ; message?: string } type SizeUnitArray = ['B', 'KB', 'MB', 'GB'] type SizeUnit = SizeUnitArray[number]。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Number / Object",
      "required": false,
      "version": ""
    },
    "status": {
      "description": "文件上传提示文本状态。可选项：default/success/warning/error",
      "description_zh": "文件上传提示文本状态。可选项：default/success/warning/error",
      "default": "-",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "theme": {
      "description": "组件风格。custom 表示完全自定义风格；file 表示默认文件上传风格；file-input 表示输入框形式的文件上传；file-flow 表示文件批量上传；image 表示默认图片上传风格；image-flow 表示图片批量上传。可选项：custom/file/file-input/file-flow/image/image-flow",
      "description_zh": "组件风格。custom 表示完全自定义风格；file 表示默认文件上传风格；file-input 表示输入框形式的文件上传；file-flow 表示文件批量上传；image 表示默认图片上传风格；image-flow 表示图片批量上传。可选项：custom/file/file-input/file-flow/image/image-flow",
      "default": "file",
      "value": "",
      "type": "String",
      "required": false,
      "version": ""
    },
    "tips": {
      "description": "组件下方文本提示，可以使用 status 定义文本。TS 类型：string | TNode。通用类型定义",
      "description_zh": "组件下方文本提示，可以使用 status 定义文本。TS 类型：string | TNode。通用类型定义",
      "default": "-",
      "value": "",
      "type": "String / Slot / Function",
      "required": false,
      "version": ""
    },
    "trigger": {
      "description": "触发上传的元素，files 指本次显示的全部文件。TS 类型：TNode<TriggerContext> interface TriggerContext { dragActive?: boolean; disabled?: boolean; files: UploadFile[] }。通用类型定义。详细类型定义",
      "description_zh": "触发上传的元素，files 指本次显示的全部文件。TS 类型：TNode<TriggerContext> interface TriggerContext { dragActive?: boolean; disabled?: boolean; files: UploadFile[] }。通用类型定义。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Slot / Function",
      "required": false,
      "version": ""
    },
    "triggerButtonProps": {
      "description": "透传选择按钮全部属性。TS 类型：ButtonProps，Button API Documents。详细类型定义",
      "description_zh": "透传选择按钮全部属性。TS 类型：ButtonProps，Button API Documents。详细类型定义",
      "default": "-",
      "value": "",
      "type": "Object",
      "required": false,
      "version": ""
    },
    "uploadAllFilesInOneRequest": {
      "description": "是否在同一个请求中上传全部文件，默认一个请求上传一个文件。多文件上传时有效",
      "description_zh": "是否在同一个请求中上传全部文件，默认一个请求上传一个文件。多文件上传时有效",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "uploadButton": {
      "description": "批量文件/图片上传，autoUpload=false 场景下，透传“点击上传”按钮属性。TS 类型：null | ButtonProps | TNode<{ disabled: boolean; uploading: boolean; uploadFiles: () => void; uploadText: string }>。通用类型定义",
      "description_zh": "批量文件/图片上传，autoUpload=false 场景下，透传“点击上传”按钮属性。TS 类型：null | ButtonProps | TNode<{ disabled: boolean; uploading: boolean; uploadFiles: () => void; uploadText: string }>。通用类型定义",
      "default": "-",
      "value": "",
      "type": "Object / Slot / Function",
      "required": false,
      "version": ""
    },
    "uploadPastedFiles": {
      "description": "是否允许粘贴上传剪贴板中的文件",
      "description_zh": "是否允许粘贴上传剪贴板中的文件",
      "default": "true",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "useMockProgress": {
      "description": "是否在请求时间超过 300ms 后显示模拟进度。上传进度有模拟进度和真实进度两种。一般大小的文件上传，真实的上传进度只有 0 和 100，不利于交互呈现，因此组件内置模拟上传进度。真实上传进度一般用于大文件上传。",
      "description_zh": "是否在请求时间超过 300ms 后显示模拟进度。上传进度有模拟进度和真实进度两种。一般大小的文件上传，真实的上传进度只有 0 和 100，不利于交互呈现，因此组件内置模拟上传进度。真实上传进度一般用于大文件上传。",
      "default": "true",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "value": {
      "description": "已上传文件列表，同 files。TS 类型：UploadFile。支持语法糖 v-model。TS 类型：Array<T>",
      "description_zh": "已上传文件列表，同 files。TS 类型：UploadFile。支持语法糖 v-model。TS 类型：Array<T>",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "defaultValue": {
      "description": "已上传文件列表，同 files。TS 类型：UploadFile。非受控属性。TS 类型：Array<T>",
      "description_zh": "已上传文件列表，同 files。TS 类型：UploadFile。非受控属性。TS 类型：Array<T>",
      "default": "[]",
      "value": "",
      "type": "Array",
      "required": false,
      "version": ""
    },
    "withCredentials": {
      "description": "上传请求时是否携带 cookie",
      "description_zh": "上传请求时是否携带 cookie",
      "default": "false",
      "value": "",
      "type": "Boolean",
      "required": false,
      "version": ""
    },
    "onCancelUpload": {
      "description": "TS 类型：() => void点击「取消上传」时触发",
      "description_zh": "TS 类型：() => void点击「取消上传」时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onChange": {
      "description": "TS 类型：(value: Array<T>, context: UploadChangeContext) => void已上传文件列表发生变化时触发，trigger 表示触发本次的来源。详细类型定义。interface UploadChangeContext { e?: MouseEvent | ProgressEvent; response?: any; trigger: UploadChangeTrigger; index?: number; file?: UploadFile; files?: UploadFile[] }type UploadChangeTrigger = 'add' | 'remove' | 'abort' | 'progress-success' | 'progress' | 'progress-fail'",
      "description_zh": "TS 类型：(value: Array<T>, context: UploadChangeContext) => void已上传文件列表发生变化时触发，trigger 表示触发本次的来源。详细类型定义。interface UploadChangeContext { e?: MouseEvent | ProgressEvent; response?: any; trigger: UploadChangeTrigger; index?: number; file?: UploadFile; files?: UploadFile[] }type UploadChangeTrigger = 'add' | 'remove' | 'abort' | 'progress-success' | 'progress' | 'progress-fail'",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onDragenter": {
      "description": "TS 类型：(context: { e: DragEvent }) => void进入拖拽区域时触发",
      "description_zh": "TS 类型：(context: { e: DragEvent }) => void进入拖拽区域时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onDragleave": {
      "description": "TS 类型：(context: { e: DragEvent }) => void离开拖拽区域时触发",
      "description_zh": "TS 类型：(context: { e: DragEvent }) => void离开拖拽区域时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onDrop": {
      "description": "TS 类型：(context: { e: DragEvent }) => void拖拽结束时触发",
      "description_zh": "TS 类型：(context: { e: DragEvent }) => void拖拽结束时触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onFail": {
      "description": "TS 类型：(options: UploadFailContext) => void上传失败后触发。response 指接口响应结果，response.error 会作为错误文本提醒。如果希望判定为上传失败，但接口响应数据不包含 error 字段，可以使用 formatResponse 格式化 response 数据结构。如果是多文件多请求上传场景，请到事件 onOneFileFail 中查看 response。详细类型定义。interface UploadFailContext { e?: ProgressEvent; failedFiles: UploadFile[]; currentFiles: UploadFile[]; response?: any; file: UploadFile; XMLHttpRequest?: XMLHttpRequest}",
      "description_zh": "TS 类型：(options: UploadFailContext) => void上传失败后触发。response 指接口响应结果，response.error 会作为错误文本提醒。如果希望判定为上传失败，但接口响应数据不包含 error 字段，可以使用 formatResponse 格式化 response 数据结构。如果是多文件多请求上传场景，请到事件 onOneFileFail 中查看 response。详细类型定义。interface UploadFailContext { e?: ProgressEvent; failedFiles: UploadFile[]; currentFiles: UploadFile[]; response?: any; file: UploadFile; XMLHttpRequest?: XMLHttpRequest}",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onOneFileFail": {
      "description": "TS 类型：(options: UploadFailContext) => void多文件/图片场景下，单个文件上传失败后触发，如果一个请求上传一个文件，则会触发多次。单文件/图片不会触发",
      "description_zh": "TS 类型：(options: UploadFailContext) => void多文件/图片场景下，单个文件上传失败后触发，如果一个请求上传一个文件，则会触发多次。单文件/图片不会触发",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onOneFileSuccess": {
      "description": "TS 类型：(context: Pick<SuccessContext, 'e' | 'file' | 'response' | 'XMLHttpRequest'>) => void单个文件上传成功后触发，在多文件场景下会触发多次。context.file 表示当前上传成功的单个文件，context.response 表示上传请求的返回数据",
      "description_zh": "TS 类型：(context: Pick<SuccessContext, 'e' | 'file' | 'response' | 'XMLHttpRequest'>) => void单个文件上传成功后触发，在多文件场景下会触发多次。context.file 表示当前上传成功的单个文件，context.response 表示上传请求的返回数据",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onPreview": {
      "description": "TS 类型：(options: { file: UploadFile; index: number; e: MouseEvent }) => void点击图片预览时触发，文件没有预览",
      "description_zh": "TS 类型：(options: { file: UploadFile; index: number; e: MouseEvent }) => void点击图片预览时触发，文件没有预览",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onProgress": {
      "description": "TS 类型：(options: ProgressContext) => void上传进度变化时触发，真实进度和模拟进度都会触发。⚠️ 原始上传请求，小文件的上传进度只有 0 和 100，故而不会触发 progress 事件；只有大文件才有真实的中间进度。如果你希望很小的文件也显示上传进度，保证 useMockProgress=true 的情况下，设置 mockProgressDuration 为更小的值。参数 options.type=real 表示真实上传进度，options.type=mock 表示模拟上传进度。详细类型定义。interface ProgressContext { e?: ProgressEvent; file?: UploadFile; currentFiles: UploadFile[]; percent: number; type: UploadProgressType; XMLHttpRequest?: XMLHttpRequest }type UploadProgressType = 'real' | 'mock'",
      "description_zh": "TS 类型：(options: ProgressContext) => void上传进度变化时触发，真实进度和模拟进度都会触发。⚠️ 原始上传请求，小文件的上传进度只有 0 和 100，故而不会触发 progress 事件；只有大文件才有真实的中间进度。如果你希望很小的文件也显示上传进度，保证 useMockProgress=true 的情况下，设置 mockProgressDuration 为更小的值。参数 options.type=real 表示真实上传进度，options.type=mock 表示模拟上传进度。详细类型定义。interface ProgressContext { e?: ProgressEvent; file?: UploadFile; currentFiles: UploadFile[]; percent: number; type: UploadProgressType; XMLHttpRequest?: XMLHttpRequest }type UploadProgressType = 'real' | 'mock'",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onRemove": {
      "description": "TS 类型：(context: UploadRemoveContext) => void移除文件时触发。详细类型定义。interface UploadRemoveContext { index?: number; file?: UploadFile; e: MouseEvent }",
      "description_zh": "TS 类型：(context: UploadRemoveContext) => void移除文件时触发。详细类型定义。interface UploadRemoveContext { index?: number; file?: UploadFile; e: MouseEvent }",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onSelectChange": {
      "description": "TS 类型：(files: File[], context: UploadSelectChangeContext) => void选择文件或图片之后，上传之前，触发该事件。详细类型定义。interface UploadSelectChangeContext { currentSelectedFiles: UploadFile[] }",
      "description_zh": "TS 类型：(files: File[], context: UploadSelectChangeContext) => void选择文件或图片之后，上传之前，触发该事件。详细类型定义。interface UploadSelectChangeContext { currentSelectedFiles: UploadFile[] }",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onSuccess": {
      "description": "TS 类型：(context: SuccessContext) => void上传成功后触发。context.currentFiles 表示当次请求上传的文件（无论成功或失败），context.fileList 表示上传成功后的文件，context.response 表示上传请求的返回数据。context.results 表示单次选择全部文件上传成功后的响应结果，可以在这个字段存在时提醒用户上传成功或失败。。详细类型定义。interface SuccessContext { e?: ProgressEvent; file?: UploadFile; fileList?: UploadFile[]; currentFiles?: UploadFile[]; response?: any; results?: SuccessContext[]; XMLHttpRequest?: XMLHttpRequest }",
      "description_zh": "TS 类型：(context: SuccessContext) => void上传成功后触发。context.currentFiles 表示当次请求上传的文件（无论成功或失败），context.fileList 表示上传成功后的文件，context.response 表示上传请求的返回数据。context.results 表示单次选择全部文件上传成功后的响应结果，可以在这个字段存在时提醒用户上传成功或失败。。详细类型定义。interface SuccessContext { e?: ProgressEvent; file?: UploadFile; fileList?: UploadFile[]; currentFiles?: UploadFile[]; response?: any; results?: SuccessContext[]; XMLHttpRequest?: XMLHttpRequest }",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onValidate": {
      "description": "TS 类型：(context: { type: UploadValidateType, files: UploadFile[] }) => void文件上传校验结束事件，文件数量超出、文件大小超出限制、文件同名、beforeAllFilesUpload 返回值为假、beforeUpload 返回值为假等场景会触发。注意：如果设置允许上传同名文件，即 allowUploadDuplicateFile=true，则不会因为文件重名触发该事件。结合 status 和 tips 可以在组件中呈现不同类型的错误（或告警）提示。详细类型定义。type UploadValidateType = 'FILE_OVER_SIZE_LIMIT' | 'FILES_OVER_LENGTH_LIMIT' | 'FILTER_FILE_SAME_NAME' | 'BEFORE_ALL_FILES_UPLOAD' | 'CUSTOM_BEFORE_UPLOAD'",
      "description_zh": "TS 类型：(context: { type: UploadValidateType, files: UploadFile[] }) => void文件上传校验结束事件，文件数量超出、文件大小超出限制、文件同名、beforeAllFilesUpload 返回值为假、beforeUpload 返回值为假等场景会触发。注意：如果设置允许上传同名文件，即 allowUploadDuplicateFile=true，则不会因为文件重名触发该事件。结合 status 和 tips 可以在组件中呈现不同类型的错误（或告警）提示。详细类型定义。type UploadValidateType = 'FILE_OVER_SIZE_LIMIT' | 'FILES_OVER_LENGTH_LIMIT' | 'FILTER_FILE_SAME_NAME' | 'BEFORE_ALL_FILES_UPLOAD' | 'CUSTOM_BEFORE_UPLOAD'",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    },
    "onWaitingUploadFilesChange": {
      "description": "TS 类型：(context: { files: Array<UploadFile>, trigger: 'validate' | 'remove' | 'uploaded' }) => void待上传文件列表发生变化时触发。context.files 表示事件参数为待上传文件，context.trigger 引起此次变化的触发来源",
      "description_zh": "TS 类型：(context: { files: Array<UploadFile>, trigger: 'validate' | 'remove' | 'uploaded' }) => void待上传文件列表发生变化时触发。context.files 表示事件参数为待上传文件，context.trigger 引起此次变化的触发来源",
      "default": "",
      "value": "",
      "type": "Function",
      "required": false,
      "version": ""
    }
  },
  "link": "https://tdesign.tencent.com/vue/components/upload",
  "link_zh": "https://tdesign.tencent.com/vue/components/upload",
  "typeDetail": {},
  "events": [
    {
      "name": "cancel-upload",
      "description": "点击「取消上传」时触发",
      "params": "-",
      "description_zh": "点击「取消上传」时触发"
    },
    {
      "name": "change",
      "description": "已上传文件列表发生变化时触发，trigger 表示触发本次的来源。详细类型定义。interface UploadChangeContext { e?: MouseEvent | ProgressEvent; response?: any; trigger: UploadChangeTrigger; index?: number; file?: UploadFile; files?: UploadFile[] }type UploadChangeTrigger = 'add' | 'remove' | 'abort' | 'progress-success' | 'progress' | 'progress-fail'",
      "params": "(value: Array<T>, context: UploadChangeContext)",
      "description_zh": "已上传文件列表发生变化时触发，trigger 表示触发本次的来源。详细类型定义。interface UploadChangeContext { e?: MouseEvent | ProgressEvent; response?: any; trigger: UploadChangeTrigger; index?: number; file?: UploadFile; files?: UploadFile[] }type UploadChangeTrigger = 'add' | 'remove' | 'abort' | 'progress-success' | 'progress' | 'progress-fail'"
    },
    {
      "name": "dragenter",
      "description": "进入拖拽区域时触发",
      "params": "(context: { e: DragEvent })",
      "description_zh": "进入拖拽区域时触发"
    },
    {
      "name": "dragleave",
      "description": "离开拖拽区域时触发",
      "params": "(context: { e: DragEvent })",
      "description_zh": "离开拖拽区域时触发"
    },
    {
      "name": "drop",
      "description": "拖拽结束时触发",
      "params": "(context: { e: DragEvent })",
      "description_zh": "拖拽结束时触发"
    },
    {
      "name": "fail",
      "description": "上传失败后触发。response 指接口响应结果，response.error 会作为错误文本提醒。如果希望判定为上传失败，但接口响应数据不包含 error 字段，可以使用 formatResponse 格式化 response 数据结构。如果是多文件多请求上传场景，请到事件 onOneFileFail 中查看 response。详细类型定义。interface UploadFailContext { e?: ProgressEvent; failedFiles: UploadFile[]; currentFiles: UploadFile[]; response?: any; file: UploadFile; XMLHttpRequest?: XMLHttpRequest}",
      "params": "(options: UploadFailContext)",
      "description_zh": "上传失败后触发。response 指接口响应结果，response.error 会作为错误文本提醒。如果希望判定为上传失败，但接口响应数据不包含 error 字段，可以使用 formatResponse 格式化 response 数据结构。如果是多文件多请求上传场景，请到事件 onOneFileFail 中查看 response。详细类型定义。interface UploadFailContext { e?: ProgressEvent; failedFiles: UploadFile[]; currentFiles: UploadFile[]; response?: any; file: UploadFile; XMLHttpRequest?: XMLHttpRequest}"
    },
    {
      "name": "one-file-fail",
      "description": "多文件/图片场景下，单个文件上传失败后触发，如果一个请求上传一个文件，则会触发多次。单文件/图片不会触发",
      "params": "(options: UploadFailContext)",
      "description_zh": "多文件/图片场景下，单个文件上传失败后触发，如果一个请求上传一个文件，则会触发多次。单文件/图片不会触发"
    },
    {
      "name": "one-file-success",
      "description": "单个文件上传成功后触发，在多文件场景下会触发多次。context.file 表示当前上传成功的单个文件，context.response 表示上传请求的返回数据",
      "params": "(context: Pick<SuccessContext, 'e' | 'file' | 'response' | 'XMLHttpRequest'>)",
      "description_zh": "单个文件上传成功后触发，在多文件场景下会触发多次。context.file 表示当前上传成功的单个文件，context.response 表示上传请求的返回数据"
    },
    {
      "name": "preview",
      "description": "点击图片预览时触发，文件没有预览",
      "params": "(options: { file: UploadFile; index: number; e: MouseEvent })",
      "description_zh": "点击图片预览时触发，文件没有预览"
    },
    {
      "name": "progress",
      "description": "上传进度变化时触发，真实进度和模拟进度都会触发。⚠️ 原始上传请求，小文件的上传进度只有 0 和 100，故而不会触发 progress 事件；只有大文件才有真实的中间进度。如果你希望很小的文件也显示上传进度，保证 useMockProgress=true 的情况下，设置 mockProgressDuration 为更小的值。参数 options.type=real 表示真实上传进度，options.type=mock 表示模拟上传进度。详细类型定义。interface ProgressContext { e?: ProgressEvent; file?: UploadFile; currentFiles: UploadFile[]; percent: number; type: UploadProgressType; XMLHttpRequest?: XMLHttpRequest }type UploadProgressType = 'real' | 'mock'",
      "params": "(options: ProgressContext)",
      "description_zh": "上传进度变化时触发，真实进度和模拟进度都会触发。⚠️ 原始上传请求，小文件的上传进度只有 0 和 100，故而不会触发 progress 事件；只有大文件才有真实的中间进度。如果你希望很小的文件也显示上传进度，保证 useMockProgress=true 的情况下，设置 mockProgressDuration 为更小的值。参数 options.type=real 表示真实上传进度，options.type=mock 表示模拟上传进度。详细类型定义。interface ProgressContext { e?: ProgressEvent; file?: UploadFile; currentFiles: UploadFile[]; percent: number; type: UploadProgressType; XMLHttpRequest?: XMLHttpRequest }type UploadProgressType = 'real' | 'mock'"
    },
    {
      "name": "remove",
      "description": "移除文件时触发。详细类型定义。interface UploadRemoveContext { index?: number; file?: UploadFile; e: MouseEvent }",
      "params": "(context: UploadRemoveContext)",
      "description_zh": "移除文件时触发。详细类型定义。interface UploadRemoveContext { index?: number; file?: UploadFile; e: MouseEvent }"
    },
    {
      "name": "select-change",
      "description": "选择文件或图片之后，上传之前，触发该事件。详细类型定义。interface UploadSelectChangeContext { currentSelectedFiles: UploadFile[] }",
      "params": "(files: File[], context: UploadSelectChangeContext)",
      "description_zh": "选择文件或图片之后，上传之前，触发该事件。详细类型定义。interface UploadSelectChangeContext { currentSelectedFiles: UploadFile[] }"
    },
    {
      "name": "success",
      "description": "上传成功后触发。context.currentFiles 表示当次请求上传的文件（无论成功或失败），context.fileList 表示上传成功后的文件，context.response 表示上传请求的返回数据。context.results 表示单次选择全部文件上传成功后的响应结果，可以在这个字段存在时提醒用户上传成功或失败。。详细类型定义。interface SuccessContext { e?: ProgressEvent; file?: UploadFile; fileList?: UploadFile[]; currentFiles?: UploadFile[]; response?: any; results?: SuccessContext[]; XMLHttpRequest?: XMLHttpRequest }",
      "params": "(context: SuccessContext)",
      "description_zh": "上传成功后触发。context.currentFiles 表示当次请求上传的文件（无论成功或失败），context.fileList 表示上传成功后的文件，context.response 表示上传请求的返回数据。context.results 表示单次选择全部文件上传成功后的响应结果，可以在这个字段存在时提醒用户上传成功或失败。。详细类型定义。interface SuccessContext { e?: ProgressEvent; file?: UploadFile; fileList?: UploadFile[]; currentFiles?: UploadFile[]; response?: any; results?: SuccessContext[]; XMLHttpRequest?: XMLHttpRequest }"
    },
    {
      "name": "validate",
      "description": "文件上传校验结束事件，文件数量超出、文件大小超出限制、文件同名、beforeAllFilesUpload 返回值为假、beforeUpload 返回值为假等场景会触发。注意：如果设置允许上传同名文件，即 allowUploadDuplicateFile=true，则不会因为文件重名触发该事件。结合 status 和 tips 可以在组件中呈现不同类型的错误（或告警）提示。详细类型定义。type UploadValidateType = 'FILE_OVER_SIZE_LIMIT' | 'FILES_OVER_LENGTH_LIMIT' | 'FILTER_FILE_SAME_NAME' | 'BEFORE_ALL_FILES_UPLOAD' | 'CUSTOM_BEFORE_UPLOAD'",
      "params": "(context: { type: UploadValidateType, files: UploadFile[] })",
      "description_zh": "文件上传校验结束事件，文件数量超出、文件大小超出限制、文件同名、beforeAllFilesUpload 返回值为假、beforeUpload 返回值为假等场景会触发。注意：如果设置允许上传同名文件，即 allowUploadDuplicateFile=true，则不会因为文件重名触发该事件。结合 status 和 tips 可以在组件中呈现不同类型的错误（或告警）提示。详细类型定义。type UploadValidateType = 'FILE_OVER_SIZE_LIMIT' | 'FILES_OVER_LENGTH_LIMIT' | 'FILTER_FILE_SAME_NAME' | 'BEFORE_ALL_FILES_UPLOAD' | 'CUSTOM_BEFORE_UPLOAD'"
    },
    {
      "name": "waiting-upload-files-change",
      "description": "待上传文件列表发生变化时触发。context.files 表示事件参数为待上传文件，context.trigger 引起此次变化的触发来源",
      "params": "(context: { files: Array<UploadFile>, trigger: 'validate' | 'remove' | 'uploaded' })",
      "description_zh": "待上传文件列表发生变化时触发。context.files 表示事件参数为待上传文件，context.trigger 引起此次变化的触发来源"
    }
  ],
  "methods": [],
  "slots": [],
  "suggestions": [],
  "filename": "Upload"
}
